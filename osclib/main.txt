#include <stdio.h> //printf
#include <string.h> //memset
#include <stdlib.h> //exit(0);
#include <arpa/inet.h>
#include <netdb.h>
#include <sys/socket.h>
#include <fcntl.h> // for open
#include <unistd.h> // for close
#include <time.h>

// ----------------------------------- //
// --- DATA STRUCTURE REPRESENTING --- //
// --- AN OSC ARGUMENT --------------- //
// ----------------------------------- //
typedef struct {
  char typeTag;
  char* data;
} OscArg;

// ---------------------------------- //
// --- OSC LIB INTERNAL FUNCTIONS --- //
// ---------------------------------- //
char* _allocOscPacket(int bytes) {
  char* packet = NULL;
  int size = 0;
  while(size<bytes) size += 4;
  packet = malloc(size);
  memset(packet,0,size);
  return packet;
}
int _getOscPacketLength(int bytes) {
  int size = 0;
  while(size < bytes) size += 4;
  return size;
}
int _getOscArgsPacketsLength(int nArgs, OscArg** args) {
  int i, size = 0;
  for(i=0; i<nArgs; i++) {
    if(args[i]->typeTag=='i') size += 4;
    if(args[i]->typeTag=='f') size += 4;
    if(args[i]->typeTag=='s') size += _getOscPacketLength(1+strlen((char*)args[i]->data));
  }
  return size;
}
int _getOscArgPacketLength(OscArg* oscArg) {
  if(oscArg->typeTag=='i') return 4;
  if(oscArg->typeTag=='f') return 4;
  if(oscArg->typeTag=='s') return _getOscPacketLength(1+strlen(oscArg->data));
  return 0;
}

// ----------------------------------- //
// ----------------------------------- //
// ----------------------------------- //
// --- PUBLIC OSC CLIENT FUNCTIONS --- //
// ----------------------------------- //
// ------------ USE THESE ------------ //
// ----------------------------------- //
// ----------------------------------- //

OscArg* newOscArgInt16(int i) {
  OscArg* outArg = malloc(sizeof(OscArg));
  outArg->typeTag = 'i';
  outArg->data = malloc(4);
  outArg->data[0] = 0;
  outArg->data[1] = 0;
  outArg->data[2] = (i&0xFF00)>>8;
  outArg->data[3] = i&0x00FF;
  return outArg;
}

OscArg* newOscArgString(char* s) {
  OscArg* outArg = malloc(sizeof(OscArg));
  outArg->typeTag = 's';
  outArg->data = _allocOscPacket(_getOscPacketLength(1+strlen(s)));
  memcpy(outArg->data, s, 1+strlen(s));
  return outArg;
}

int buildOscMessage(char** outBuffer, char* address, int nArgs, OscArg** args) {
  int i;

  int addressLength = _getOscPacketLength(1+strlen(address));
  int typeTagsLength = _getOscPacketLength(nArgs+2); // +2 accounts for , and null byte
  int argsLength = _getOscArgsPacketsLength(nArgs, args);
  
  int oscMessageIndex = 0;
  char* oscMessage = _allocOscPacket(addressLength+typeTagsLength+argsLength);
  
  // --- //

  memcpy(oscMessage,address,1+strlen(address));
  oscMessageIndex += addressLength;

  // --- //

  oscMessage[oscMessageIndex] = ',';
  for(i=0; i<nArgs; i++) {
    oscMessage[oscMessageIndex+i+1] = args[i]->typeTag;
  }  
  oscMessageIndex += typeTagsLength;

  // --- //

  for(i=0; i<nArgs; i++) {
    int j;
    int argLength = _getOscArgPacketLength(args[i]);
    for(j=0; j<argLength; j++) {
      oscMessage[oscMessageIndex+j] = args[i]->data[j];
    }
    oscMessageIndex += argLength;
  }

  // --- //

  (*outBuffer) = oscMessage;

  return oscMessageIndex;
}

// -------------------------------------- //
// --- BEGIN EXAMPLE OSC CLIENT CODE ---- //
// -------------------------------------- //
// --- ATTENTION! USE THIS TO LISTEN! --- //
// ---      netcat -lu -p 8888        --- //
// -------------------------------------- //

#define BUFLEN 512  //Max length of buffer
#define PORT 8888   //The port on which to listen for incoming data

void die(char* s, int e)
{
  printf(s,e);
  perror(s);
  exit(1);
}

int main(void)
{
  const char* hostname="127.0.0.1"; /* localhost */
  const char* portname="8000";
  struct addrinfo hints;
  memset(&hints,0,sizeof(hints));
  hints.ai_family=AF_UNSPEC;
  hints.ai_socktype=SOCK_DGRAM;
  hints.ai_protocol=0;
  hints.ai_flags=AI_ADDRCONFIG;
  struct addrinfo* res=0;
  int err=getaddrinfo(hostname,portname,&hints,&res);
  if (err!=0) {
    die("failed to resolve remote socket address (err=%d)",err);
  }
  int fd=socket(res->ai_family,res->ai_socktype,res->ai_protocol);
  if (fd==-1) {
    die("%s",err);
  }

  // ------------------------ //
  // ------------------------ //
  // --- USE THAT OSC LIB --- //
  // ------------------------ //
  // ------------------------ //

  OscArg* args[6];
  args[0] = newOscArgInt16(1337);
  args[1] = newOscArgString("mothafuckas");
  args[2] = newOscArgInt16(0x1010);
  args[3] = newOscArgString("abcdefg");
  args[4] = newOscArgInt16(0xDEAD);
  args[5] = newOscArgString("01234");
  char* oscMessage;
  int oscMessageLength = buildOscMessage(&oscMessage, "/test", 6, args); 

  // ------------ //
  // ------------ //
  // --- DONE --- // 
  // ------------ //
  // ------------ //

  while(1)
  {
    int i;
    if (sendto(fd,oscMessage,oscMessageLength,0,res->ai_addr,res->ai_addrlen)==-1) die("%s",err);
    printf("--------\n");
    for(i=0;i<oscMessageLength;i++) {
      printf("%4d: %2x\n",i,oscMessage[i]);
    }
    printf("--------\n");
    usleep(1000000);
  }
  close(fd);
  return 0;
}
